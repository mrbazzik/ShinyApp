geom_abline(intercept=mean(mtcars$drat[mtcars$am==0]), slope=0, size=2)+
geom_abline(intercept=mean(mtcars$drat[mtcars$am==1]), slope=0, size=2)
g
g<-ggplot(mtcars, aes(x=factor(am), y=drat))+
geom_violin()+
geom_abline(intercept=mean(mtcars$drat[mtcars$am==0]), slope=0, size=2)+
geom_abline(intercept=mean(mtcars$drat[mtcars$am==1]), slope=0, size=2)
g
fit<-lm(drat~factor(am), mtcars)
summary(fit)
cor(mtcars$drat, mtcars$am)
summary(cor(mtcars$drat, mtcars$am))
cor(mtcars$drat, mtcars$am)
pairs(mtcars, lower.panel=panel.smooth, upper.panel=panel.cor)
fit<-lm(disp~factor(am), mtcars)
summary(fit)
fit<-lm(wt~factor(am), mtcars)
summary(fit)
fit<-lm(gear~factor(am), mtcars)
summary(fit)
fit<-lm(cyl~factor(am), mtcars)
summary(fit)
fit<-lm(mpg~factor(am)+drat+wt+disp+factor(cyl)+factor(gear), mtcars)
summary(fit)
str(mtcars)
?mtcars
resMPG<-resid(lm(mpg~wt, mtcars))
pairs(mtcars, lower.panel=panel.smooth, upper.panel=panel.cor)
fit<-lm(mpg~drat+wt+factor(gear)+factor(am))
fit<-lm(mpg~drat+wt+factor(gear)+factor(am), mtcars)
summary(fit)
df<-data.frame
df$mpg<-resid(lm(mpg~wt, mtcars))
df<-data.frame()
df$mpg<-resid(lm(mpg~wt, mtcars))
df<-data.frame(mpg=resid(lm(mpg~wt, mtcars)))
df
view(df)
viewer(df)
Viewer(df)
View(df)
df$disp<-resid(lm(disp~wt, mtcars))
df$cyl<-resid(lm(cyl~wt, mtcars))
df<-data.frame(mpg=resid(lm(mpg~wt, mtcars)))
df$disp<-resid(lm(disp~wt, mtcars))
df$cyl<-resid(lm(factor(cyl)~wt, mtcars))
df$gear<-resid(lm(factor(gear)~wt, mtcars))
df$drat<-resid(lm(drat~wt, mtcars))
df$am<-resid(lm(factor(am)~wt, mtcars))
summary(lm(mpg~.,df))
pairs(mtcars, lower.panel=panel.smooth, upper.panel=panel.cor)
summary(lm(mpg~wt+drat+disp+factor(am), mtcars))
df<-data.frame(mpg=resid(lm(mpg~wt, mtcars)))
df$disp<-resid(lm(disp~wt, mtcars))
df$drat<-resid(lm(drat~wt, mtcars))
df$am<-factor(mtcars$am)
summary(lm(mpg~., df))
summary(lm(mpg~am, df))
summary(lm(mpg~factor(am), mtcars))
summary(lm(wt~factor(am), mtcars))
?mtcars
summary(lm(mpg~wt+drat+disp+factor(am), mtcars))
summary(lm(mpg~drat+disp+factor(am), mtcars))
summary(lm(mpg~drat+factor(am), mtcars))
summary(lm(mpg~disp+factor(am), mtcars))
summary(lm(mpg~factor(cyl)+factor(am), mtcars))
summary(lm(mpg~factor(gear)+factor(am), mtcars))
summary(lm(mpg~hp+factor(am), mtcars))
summary(lm(mpg~wt+factor(am), mtcars))
summary(lm(mpg~wt+drat+disp+factor(am), mtcars))
df<-data.frame(mpg=resid(lm(mpg~wt, mtcars)))
df$disp<-resid(lm(disp~wt, mtcars))
df$drat<-resid(lm(drat~wt, mtcars))
df$am<-factor(mtcars$am)
summary(lm(mpg~., df))
summary(lm(mpg~factor(am), df))
summary(lm(mpg~wt, mtcars))
summary(lm(resMPG~factor(am), mtcars))
?mtcars
pairs(mtcars, lower.panel=panel.smooth, upper.panel=panel.cor)
summary(lm(mpg~factor(am), mtcars))
summary(lm(mpg~drat+disp+factor(am), mtcars))
summary(lm(mpg~disp+factor(am), mtcars))
summary(lm(mpg~wt+qsec+factor(am), mtcars))
summary(lm(mpg~., mtcars))
summary(lm(mpg~.-qsec-gear, mtcars))
summary(lm(mpg~.-qsec-gear-carb-disp, mtcars))
summary(lm(mpg~.-qsec-gear-carb-disp-cyl-drat, mtcars))
summary(lm(mpg~.-qsec-gear-carb-disp-cyl-drat-vs, mtcars))
summary(lm(mpg~., mtcars))
summary(lm(mpg~.-disp, mtcars))
summary(lm(mpg~.-disp-cyl, mtcars))
summary(lm(mpg~.-am+factor(am), mtcars))
summary(lm(mpg~.-am+factor(am)-cyl, mtcars))
summary(lm(mpg~.-am+factor(am)-cyl-vs, mtcars))
summary(lm(mpg~.-am+factor(am)-cyl-vs-carb, mtcars))
summary(lm(mpg~.-am+factor(am)-cyl-vs-carb-gear, mtcars))
summary(lm(mpg~.-am+factor(am)-cyl-vs-carb-gear-drat, mtcars))
summary(lm(mpg~.-am+factor(am)-cyl-vs-carb-gear-drat-disp, mtcars))
summary(lm(mpg~.-am+factor(am)-cyl-vs-carb-gear-drat-disp-hp, mtcars))
summary(lm(mpg~.-am+factor(am)-cyl-vs-carb-gear-drat-disp-hp-1, mtcars))
summary(lm(mpg~.-am+factor(am)-cyl-vs-carb-gear-drat-disp-hp, mtcars))
library(ggplot2)
g<-ggplot(mtcars, aes(x=factor(am), y=mpg, fill=factor(am)))+
geom_violin()+
xlab("Type of transmission")+ylab("MPG")+
geom_abline(intercept=mean(mtcars$mpg[mtcars$am==0]), slope=0, size=2)+
geom_abline(intercept=mean(mtcars$mpg[mtcars$am==1]), slope=0, size=2)
g
g<-ggplot(mtcars, aes(x=factor(cyl), y=mpg, fill=factor(am)))+
geom_boxplot()+
xlab("Number of cylinders")+ylab("MPG")
g
library(ggplot2)
g<-ggplot(mtcars, aes(x=factor(am), y=mpg, fill=factor(am)))+
geom_violin()+
xlab("Type of transmission")+ylab("MPG")+
geom_abline(intercept=mean(mtcars$mpg[mtcars$am==0]), slope=0, size=2)+
geom_abline(intercept=mean(mtcars$mpg[mtcars$am==1]), slope=0, size=2)
g
library(datasets)
data(mtcars)
str(mtcars)
mtcars$am<-factor
library(datasets)
data(mtcars)
str(mtcars)
mtcars$am<-factor(mtcars$am)
fit<-lm(mpg~am, mtcars)
summray(fit)
summary(fit)
fit<-lm(mpg~., mtcars)
summary(fit)
fit<-lm(mpg~.-cyl, mtcars)
summary(fit)
fit<-lm(mpg~.-vs, mtcars)
summary(fit)
fit<-lm(mpg~.-cyl-vs, mtcars)
summary(fit)
fit<-lm(mpg~.-cyl-vs-gear, mtcars)
summary(fit)
fit<-lm(mpg~.-cyl-vs-gear-carb, mtcars)
summary(fit)
fit<-lm(mpg~.-cyl-vs-gear-carb-drat, mtcars)
summary(fit)
fit<-lm(mpg~.-cyl-vs-gear-carb-drat-disp, mtcars)
summary(fit)
fit<-lm(mpg~.-cyl-vs-gear-carb-drat-disp-hp, mtcars)
summary(fit)
fit<-lm(mpg~.-cyl, mtcars)
summary(fit)$coef
plot(fit,which=1)
fit<-lm(mpg~.-cyl-vs-gear-carb-drat-disp-hp, mtcars)
plot(fit,which=1)
plot(fit,which=2)
plot(fit,which=3)
plot(fit,which=4)
plot(fit,which=5)
plot(fit,which=6)
plot(fit,which=7)
plot(fit,which=1)
plot(fit,which=3)
plot(fit,which=4)
plot(fit,which=2)
plot(fit,which=5)
library(swirl)
swirl()
ravenData
mdl<-glm(ravenWinNum~ravenScore, family="binomial", ravenData)
lodds<-predict(mdl, data.frame(ravenScore=c(0,3,6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(cinfunt*mdl)
exp(cinfunt(mdl)
)
exp(confunt(mdl))
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
var(rpois(1000, 50))
head(hits)
class(hits[,"date"])
as.integer(head(hits[,]))
as.integer(head(hits[,'date']))
mdl<-glm(visits~date, poisson, hits)
summary(mdl)
exp(confint(mdl, 'date'))
which.max(hist[,'visits'])
which.max(hist[,'Visits'])
which.max(hists[,'Visits'])
which.max(hists[,'visits'])
which.max(hits[,'visits'])
hits[704,]
lambda<-mdl$fitted.values[704]
qpois(.95, lambda)
mdl2<-glm(visits~date, poisson, hits, offset=log(visits+1))
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits, offset = log(visits + 1))
qpois(.95, mdl2$fitted.values[704])
library(MASS)
data(shuttle)
str(shuttle)
glm(use~wind, shuttle)
glm(use~wind, family='binomial',shuttle)
mdl<-glm(use~wind, family='binomial',shuttle)
summary(mdl)
str(shuttle)
levels(shuttle$use)
unique(shuutle$use)
unique(shuttle$use)
?relevel
shuttle$use<-relevel(shuttle$use, "noauto")
str(shuttle)
mdl<-glm(use~wind, family='binomial',shuttle)
summary(mdl)
mdl<-glm(use~wind+magn, family='binomial',shuttle)
summary(mdl)
library(MASS)
data(shuttle)
str(shuttle)
shuttle$use<-relevel(shuttle$use, "noauto")
str(shuttle)
mdl<-glm(use~wind, shuttle, method="binary")
mdl<-glm(use~wind, shuttle, method="binomial")
mdl<-glm(use~wind, shuttle, family="binary")
mdl<-glm(use~wind, shuttle, family="binomial")
summary(mdl)
str(shuttle)
mdl<-glm(use~wind+magn, shuttle, family="binomial")
summary(mdl)
data(InsectSprays)
str(InsectSprays)
mdl<-glm(count~spray, data=InsectSprays, family="poisson")
summary(mdl)
x<-c(1,2,3,4)
y<-2*x
t<-1
glm(y ~ x + offset(t), family = poisson)
t<-c(1,1,1,1)
glm(y ~ x + offset(t), family = poisson)
t2 <- log(10) + t
glm(y ~ x + offset(t2), family = poisson)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(x,y)
n <- 100; x <- c(10, rnorm(n)); y <- c(10, c(rnorm(n)))
n <- 100
x <- c(10, rnorm(n))
y <- c(10, c(rnorm(n)))
cor(y,x)
plot(x, y, frame = FALSE, cex = 2, pch = 21, bg = "lightblue", col = "black")
abline(lm(y ~ x))
summary(lm(y~x))
?cor
cor.test(y,x)
x <- rnorm(n)
y <- c(rnorm(n))
cor.test(y,x)
plot(y,x)
abline(lm(y~x))
x <- c(10, rnorm(n))
y <- c(10, c(rnorm(n)))
dfbetas(lm(y~x))
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
install.packages("caret")
lilbrary(caret)
library(caret)
data(AlzheimerDesease)
data(AlzheimerDisease)
summary(AlzheimerDisease)
summary(predictors)
str(predictors)
head(predictors)
head(diagnosis)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
str(training)
names(training)[59]
names(training)[58]
names(training)[57]
names(training)[68]
names(training)[69]
obj <- preProcess(trainingp[,58:69], method="pca")
obj <- preProcess(training[,58:69], method="pca")
tr<-predict(obj, trainig[,58:69])
tr<-predict(obj, training[,58:69])
str(tr)
summary(tr)
obj <- prcomp(training[,58:69])
summary(obj)
obj <- preProcess(training[,58:69], method="pca")
tr<-predict(obj, training[,58:69])
tr
obj <- preProcess(training[,58:69], method="pca", tresh = 0.8)
tr<-predict(obj, training[,58:69])
str(tr)
train<-training[,58:69]
train$diagnosis<-training$diagnosis
model1<-glm(diagnosis~., train)
model1<-glm(diagnosis~., train, family="binary")
?glm
model1<-glm(diagnosis~., train, family="binomial")
pr<-predict(glm, train)
model1<-train(diagnosis~., data=train, method="glm")
str(train)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
train<-training[,58:69]
train$diagnosis<-training$diagnosis
model1<-train(diagnosis~., data=train, method="glm")
install.packages("e1071")
model1<-train(diagnosis~., data=train, method="glm")
pr1<-predict(model1, train)
test<-testing[,58:69]
test$diagnosis<-testing$diagnosis
pr2<-predict(model1, test)
sum(pr2==test$diagnosis)/len(test$diagnosis)
dim(test[1])
dim(test)
sum(pr2==test$diagnosis)/82
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
head(segmantationOriginal)
head(segmentationOriginal)
training<-segmentationOriginal[, Case=="Test"]
training<-segmentationOriginal[, select(Case=="Test")]
training<-subset(segmentationOriginal, Case=="Test")
training<-subset(segmentationOriginal, Case=="Train")
testing<-subset(segmentationOriginal, Case=="Test")
model<-train(Case~., data = segmentationOriginal[,-c("Case")],method="rpart")
model<-train(Case~., data = segmentationOriginal[,-"Case"],method="rpart")
model<-train(Case~., data = segmentationOriginal[,-Case],method="rpart")
model<-train(Case~., data = segmentationOriginal,method="rpart")
Tot<-c(23000, 50000, 57000, NA)
Fiber<-c(10, 10, 8, 8)
Perim<-c(2, NA, NA, 2)
VarIn<-c(NA, 100, 100, 100)
df<- data.frame(TotalIntench2 = Tot, FiberWidthCh1 = Fiber, PerimStatusCh1=Perim, VarIntenCh4=VarIn)
predict(model, df)
model<-train(Class~., data = subset(segmentationOriginal, select = -c("Case")),method="rpart")
model<-train(Class~., data = subset(segmentationOriginal, select = -c(Case)),method="rpart")
Tot<-c(23000, 50000, 57000, NA)
Fiber<-c(10, 10, 8, 8)
Perim<-c(2, NA, NA, 2)
VarIn<-c(NA, 100, 100, 100)
df<- data.frame(TotalIntench2 = Tot, FiberWidthCh1 = Fiber, PerimStatusCh1=Perim, VarIntenCh4=VarIn)
predict(model, df)
names(df)
names(segmentationOriginal)
print(model$finalModel)
plot(model$finalModel)
plot(model$finalModel, uniform=TRUE)
plot(model$finalModel, uniform=TRUE)
text(model$finalModel, all=TRUE)
training<-subset(segmentationOriginal, Case=="Train")
testing<-subset(segmentationOriginal, Case=="Test")
set.seed(125)
model<-train(Class~., data = subset(segmentationOriginal, select = -c(Case)),method="rpart")
set.seed(125)
model<-train(Class~., data = subset(training, select = -c(Case)),method="rpart")
print(model$finalModel)
plot(model$finalModel, uniform=TRUE)
text(model$finalModel, all=TRUE)
library(pgmm)
install.packages("pgmm")
c
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
str(olive)
model<-train(Area~., data = olive,method="rpart")
newdata = as.data.frame(t(colMeans(olive)))
pr<-predict(model, newdata)
pr
unique(olive$Area)
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
str(trainSA)
model<-train(chd~age+alcohol+obesity+tobacco+typea+ldl, data=trainSA, method="glm", family="binomial")
model<-train(factor(chd)~age+alcohol+obesity+tobacco+typea+ldl, data=trainSA, method="glm", family="binomial")
set.seed(13234)
model<-train(factor(chd)~age+alcohol+obesity+tobacco+typea+ldl, data=trainSA, method="glm", family="binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
prtr<-predict(model, training)
prtr<-predict(model, trainSA)
prte<-predict(model, testSA)
missClass(trainSA$chd, prtr)
set.seed(13234)
model<-train(chd~age+alcohol+obesity+tobacco+typea+ldl, data=trainSA, method="glm", family="binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
prtr<-predict(model, trainSA)
prte<-predict(model, testSA)
missClass(trainSA$chd, prtr)
missClass(testSA$chd, prte)
install.packages("ElemStatLearn")
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
str(vowel.train)
vowel.train$y<-factor(vowel.train$y)
vowel.test$y<-factor(vowel.test$y)
set.seed(33833)
varImp(model)
library(caret)
varImp(model)
set.seed(33833)
model<-train(y~., data=vowel.train, method="rf")
model<-train(y~., data=vowel.train, method="rf")
varImp(model)
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='mrbazzik', token='D4235818E1DDCB1BD9095F44440DEEBB', secret='XP79m8yKZ4fQdczV6KeqfYZfGpRNsHCS3t3N5JRJ')
library(shinyapps)
shinyapps::deployApp('c:/Users/Basov_il/Documents/GitHub/ShinyApp/')
shinyapps::deployApp('c:/Users/Basov_il/Documents/GitHub/ShinyApp')
runApp()
library(shiny)
runApp()
setwd('c:/Users/Basov_il/Documents/GitHub/ShinyApp/')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shinyapps::setAccountInfo(name='mrbazzik', token='D4235818E1DDCB1BD9095F44440DEEBB', secret='XP79m8yKZ4fQdczV6KeqfYZfGpRNsHCS3t3N5JRJ')
shinyapps::deployApp('c:/Users/Basov_il/Documents/GitHub/ShinyApp')
